#include <bits/stdc++.h>

using namespace std;

struct TrieNode {
  unordered_set<string> children;
  bool isWord = false;
};

class Trie {
public:
  Trie() {
    root = new TrieNode();
  }

  void insert(const string& word) {
    TrieNode* currentNode = root;
    for (char c : word) {
      if (!currentNode->children.count(c)) {
        currentNode->children[c] = new TrieNode();
      }
      currentNode = currentNode->children[c];
    }
    currentNode->isWord = true;
  }

  bool isCompoundWord(const string& word) {
    TrieNode* currentNode = root;
    for (char c : word) {
      if (!currentNode->children.count(c)) {
        return false;
      }
      currentNode = currentNode->children[c];
      if (currentNode->isWord) {
        return true;
      }
    }
    return false;
  }

private:
  TrieNode* root;
};

string findLongestCompoundWord(const string& filename) {
  ifstream inputFile(filename);
  if (!inputFile.is_open()) {
    cerr << "Error: Could not open the input file." << endl;
    return "";
  }

  Trie trie;
  string word;
  while (inputFile >> word) {
    trie.insert(word);
  }
  inputFile.close();

  string longestCompoundWord = "";
  for (string word : trie.children) {
    if (trie.isCompoundWord(word) && word.length() > longestCompoundWord.length()) {
      longestCompoundWord = word;
    }
  }

  return longestCompoundWord;
}

int main() {
  string filename = "Input_02.txt";
  string longestCompoundWord = findLongestCompoundWord(filename);

  cout << "Longest Compound Word: " << longestCompoundWord << endl;

  return 0;
}
